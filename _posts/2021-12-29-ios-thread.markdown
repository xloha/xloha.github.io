---
layout: post
title:  "(iOS) Thread"
date: 2021-12-29 16:40:00 +0900
categories: iOS
tags:
- iOS
- Thread
---
### ❓ `Thread`

### ✅  

> ⭐️참고한 글 들
> 
> [iOS Thread](https://babbab2.tistory.com/63)
> 
> [iOS Main Thread vs Background Thread](https://velog.io/@yongchul/iOSThread%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%85%90)

# 프로세스 vs 멀티프로세스

### 프로세스
각각 독립된 메모리 영역(Code, Data, Stack, Heap)을 각자 할당받음
➡️ 따라서 **프로세스끼리는 서로의 변수나 자료구조에 절대 접근 불가능**
> 만약 A -> B 자원 접근을 하려면 프로세스간 통신(IPC)를 사용해야함 (파일, 소켓)


### 멀티프로세스
하나의 프로그램을 여러개의 프로세스로 구성하여, 각 프로세스마다 하나의 작업을 처리하도록 함


### * 멀티프로세스의 장점
독립된 구조로 안정성이 높음
> 독립된 프로세스는 메모리 영역을 각자 할당받기 때문에 프로세스 간 서로의 자원에 침투 불가능
> A 프로세스에 문제O, B 프로세스는 상관X


### * 멀티프로세스의 단점
* CPU부담 상승 
* 오버헤드 발생
* 프로세스 간 자원공유 어려움

> 각각 프로세스가 동시에 진행되는것 처럼보이지만, CPU는 프로세스를 왔다갔다하며 실행
> A프로세스 메모리영역에 올리고, B프로세스 메모리영역에 올리고 `Context Switching` ➡️  프로세스는 메모리가 독립적으로 존재하므로 CPU부담 상승, 오버헤드 발생

<br>
<br>

# 쓰레드 vs 멀티쓰레드

### 쓰레드
한 프로세스 내에서 동작되는 여러실행의 흐름

**메모리 영역을 독립적으로 할당받지 않음**

* `Code`, `Data`, `Heap` 영역 공유
* `Stack`영역만 독립적으로 할당받음

> Stack은 LIFO여서 Stack이 쌓이면 작업들이 섞인채로 순서대로 나와서 흐름에 방해가 될 수 있기 떄문
> 
> ➡️ 쓰레드들끼리는 힙영역을 공유하여 같은 자원접근 가능
> **각자의 스택영역은 서로 접근 불가능**
 